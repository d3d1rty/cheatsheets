[ARRAYS]
All examples taken from http://ruby-doc.org/core-2.2.0/Array.html
This file serves as an unofficial cheatsheet for array methods

# Initializes an array to given values
ary = [1, "two", 3.0] #=> [1, "two", 3.0]

# Initializes an empty array
ary = Array.new    #=> []

# Initializes an array with three nil items
Array.new(3)       #=> [nil, nil, nil]

# Initializes an array with three items set to given value
Array.new(3, true) #=> [true, true, true]

# Initializes an array of objects such as hashes, strings, or other arrays
Array.new(4) { Hash.new } #=> [{}, {}, {}, {}]

# Initializes multi-dimensional array
empty_table = Array.new(3) { Array.new(3) }
#=> [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]

# Returns values at given indices or ranges
arr = [1, 2, 3, 4, 5, 6]
arr[2]    #=> 3
arr[100]  #=> nil
arr[-3]   #=> 4
arr[2, 3] #=> [3, 4, 5]
arr[1..4] #=> [2, 3, 4, 5]
arr[1..-3] #=> [2, 3, 4]

# Returns first and last items in an array
arr.first #=> 1
arr.last  #=> 6

# Gets items at indices up to given parameter
arr.take(3) #=> [1, 2, 3]

# Gets items at indices following given parameter
arr.drop(3) #=> [4, 5, 6]

# Gets the size of the array
browsers = ['Chrome', 'Firefox', 'Safari', 'Opera', 'IE']
browsers.length #=> 5
browsers.count #=> 5

# Checks if array is empty
browsers.empty? #=> false

# Check if array contains item
browsers.include?('Konqueror') #=> false

# Add item to end of array
arr = [1, 2, 3, 4]
arr.push(5) #=> [1, 2, 3, 4, 5]
arr << 6    #=> [1, 2, 3, 4, 5, 6]

# Add item to beginning of an array
arr.unshift(0) #=> [0, 1, 2, 3, 4, 5, 6]

# Insert a new item at any position
arr.insert(3, 'apple')  #=> [0, 1, 2, 'apple', 3, 4, 5, 6]

# Inserts multiple values at once
arr.insert(3, 'orange', 'pear', 'grapefruit')
#=> [0, 1, 2, "orange", "pear", "grapefruit", "apple", 3, 4, 5, 6]

# Removes the last element in an array and returns the value
arr =  [1, 2, 3, 4, 5, 6]
arr.pop #=> 6
arr #=> [1, 2, 3, 4, 5]

# Removes the first element in an array and returns the value
arr.shift #=> 1
arr #=> [2, 3, 4, 5]

# Deletes an item at a given index
arr.delete_at(2) #=> 4
arr #=> [2, 3, 5]

# Deletes a particular element where ever it is in an array
arr = [1, 2, 2, 3]
arr.delete(2) #=> 2
arr #=> [1,3]

# Removes nil values from an array
arr = ['foo', 0, nil, 'bar', 7, 'baz', nil]
arr.compact  #=> ['foo', 0, 'bar', 7, 'baz']
arr          #=> ['foo', 0, nil, 'bar', 7, 'baz', nil]
arr.compact! #=> ['foo', 0, 'bar', 7, 'baz']
arr          #=> ['foo', 0, 'bar', 7, 'baz']

# Removes duplicates from an array
arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
arr.uniq #=> [2, 5, 6, 556, 8, 9, 0, 123]

# Iterate over each element in an array
arr = [1, 2, 3, 4, 5]
arr.each { |a| print a -= 10, " " }
# prints: -9 -8 -7 -6 -5
#=> [1, 2, 3, 4, 5]

# Iterates over each element in an array in reverse order
words = %w[first second third fourth fifth sixth]
str = ""
words.reverse_each { |word| str += "#{word} " }
p str #=> "sixth fifth fourth third second first "

# Non-destructive selection
arr = [1, 2, 3, 4, 5, 6]
arr.select { |a| a > 3 }     #=> [4, 5, 6]
arr.reject { |a| a < 3 }     #=> [3, 4, 5, 6]
arr.drop_while { |a| a < 4 } #=> [4, 5, 6]
arr                          #=> [1, 2, 3, 4, 5, 6]

# Destructive selection
arr.delete_if { |a| a < 4 } #=> [4, 5, 6]
arr                         #=> [4, 5, 6]

arr = [1, 2, 3, 4, 5, 6]
arr.keep_if { |a| a < 4 } #=> [1, 2, 3]
arr                       #=> [1, 2, 3]