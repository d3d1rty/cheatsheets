[STRINGS]
All examples taken from http://ruby-doc.org/core-2.2.0/String.html
This file serves as an unofficial cheatsheet for string methods

########################     MOST COMMON     ############################ 
# Returns the length of a string as an integer
"abcd".length

# Changes data type to float
"123.45e1".to_f        #=> 1234.5
"45.67 degrees".to_f   #=> 45.67
"thx1138".to_f         #=> 0.0

# Changes data type to integer
"12345".to_i             #=> 12345
"99 red balloons".to_i   #=> 99
"0a".to_i                #=> 0
"0a".to_i(16)            #=> 10
"hello".to_i             #=> 0
"1100101".to_i(2)        #=> 101
"1100101".to_i(8)        #=> 294977
"1100101".to_i(10)       #=> 1100101
"1100101".to_i(16)       #=> 17826049

# Empties a string
a = "abcde"
a.clear    #=> ""

# Removes carriage returns and newlines from the end of a string
"hello".chomp                #=> "hello"
"hello\n".chomp              #=> "hello"
"hello\r\n".chomp            #=> "hello"
"hello\n\r".chomp            #=> "hello\n"
"hello\r".chomp              #=> "hello"
"hello \n there".chomp       #=> "hello \n there"
"hello".chomp("llo")         #=> "he"
"hello\r\n\r\n".chomp('')    #=> "hello"
"hello\r\n\r\r\n".chomp('')  #=> "hello\r\n\r"

# Removes the last character of a string or any trailing whitespace
"string\r\n".chop   #=> "string"
"string\n\r".chop   #=> "string\n"
"string\n".chop     #=> "string"
"string".chop       #=> "strin"
"x".chop.chop       #=> ""

########################  FORMATTING   ############################
# Centers the string in a field of specified width, optionally pads whitespace
"hello".center(4)         #=> "hello"
"hello".center(20)        #=> "       hello        "
"hello".center(20, '123') #=> "1231231hello12312312"

# Capitalizes the first character of a string and downcases the remainder
"hello".capitalize    #=> "Hello"
"HELLO".capitalize    #=> "Hello"
"123ABC".capitalize   #=> "123abc"

# Returns a copy of the string with all lower case characters
"hEllO".downcase   #=> "hello"

# Swaps the case of a string
"Hello".swapcase          #=> "hELLO"
"cYbEr_PuNk11".swapcase   #=> "CyBeR_pUnK11"

# Changes the case of a string to all upper case characters
"hEllO".upcase   #=> "HELLO"

#########################  SUBS AND JOINS   ##########################

# Concatenates two strings
"Hello from " + self.to_s   #=> "Hello from main"

# Adds another string to the beginning of a string
a = "world"
a.prepend("hello ") #=> "hello world"
a                   #=> "hello world"

# Appends a string to another
a = "hello "
a << "world"   #=> "hello world"
a.concat(33)   #=> "hello world!"

# Replaces contents of a string with another string
s = "hello"         #=> "hello"
s.replace "world"   #=> "world"

# Reverses contents of a string
"stressed".reverse   #=> "desserts"

# Returns a substring of a string
a = "hello there"

a[1]                   #=> "e"
a[2, 3]                #=> "llo"
a[2..3]                #=> "ll"

a[-3, 2]               #=> "er"
a[7..-2]               #=> "her"
a[-4..-2]              #=> "her"
a[-2..-4]              #=> ""

a[11, 0]               #=> ""
a[11]                  #=> nil
a[12, 0]               #=> nil
a[12..-1]              #=> nil

a[/[aeiou](.)\1/]      #=> "ell"
a[/[aeiou](.)\1/, 0]   #=> "ell"
a[/[aeiou](.)\1/, 1]   #=> "l"
a[/[aeiou](.)\1/, 2]   #=> nil

a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "non_vowel"] #=> "l"
a[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "vowel"]     #=> "e"

a["lo"]                #=> "lo"
a["bye"]               #=> nil


# Counts the instances of argument within a string
a = "hello world"
a.count "lo"                   #=> 5
a.count "lo", "o"              #=> 2
a.count "hello", "^l"          #=> 4
a.count "ej-m"                 #=> 4

"hello^world".count "\\^aeiou" #=> 4
"hello-world".count "a\\-eo"   #=> 4

c = "hello world\\r\\n"
c.count "\\"                   #=> 2
c.count "\\A"                  #=> 0
c.count "X-\\w"                #=> 3

# Deletes all instances of arguments within string
"hello".delete "l","lo"        #=> "heo"
"hello".delete "lo"            #=> "he"
"hello".delete "aeiou", "^e"   #=> "hell"
"hello".delete "ej-m"          #=> "ho"

# Passes each character of a string to block
"hello".each_char {|c| print c, ' ' }

# Separates a string into multiple lines; accepts a separator character as an argument
print "Example one\n"
"hello\nworld".each_line {|s| p s}
print "Example two\n"
"hello\nworld".each_line('l') {|s| p s}
print "Example three\n"
"hello\n\n\nworld".each_line('') {|s| p s}

#######################   COMPARISONS   ###############################

# Returns -1 if string is less than, 0 if equal to, or 1 if greater than
"abcdef" <=> "abcde"     #=> 1
"abcdef" <=> "abcdef"    #=> 0
"abcdef" <=> "abcdefg"   #=> -1
"abcdef" <=> "ABCDEF"    #=> 1

# Returns true if string ends with supplied suffix
"hello".end_with?("lo")

# Returns true if string contains a given substring
"hello".include? "lo"   #=> true
"hello".include? "ol"   #=> false
"hello".include? ?h     #=> true

# Returns true if string is empty
"hello".empty?   #=> false
" ".empty?       #=> false
"".empty?        #=> true

########################  MISC  #####################################

# Returns one character string from the beginning of the string
a = "abcde"
a.chr    #=> "a"

# Searches for a pattern in the string and returns the part before, the match itself, and the part after as separate strings. If not found, returns two empty strings and the original string
"hello".partition("l")         #=> ["he", "l", "lo"]
"hello".partition("x")         #=> ["hello", "", ""]
"hello".partition(/.l/)        #=> ["h", "el", "lo"]

# Returns a new string containing (integer) number of copies
"Ho! " * 3   #=> "Ho! Ho! Ho! "
"Ho! " * 0   #=> ""